services:
  # --- Backend Services ---
  agent_service:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: agent_service
    env_file: .env
    volumes:
      - ./src/agent_service:/app/agent_service
      - ./src/shared:/app/shared
      - ./ingestion:/app/ingestion
      - local_gcs_bucket:/app/local_gcs_bucket
    command: uvicorn agent_service.web.app:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - postgres
      - qdrant
      - redis
    ports:
      - "8000:8000" # Expose for direct access during dev

  journal_service:
    build:
      context: .
      dockerfile: Dockerfile.journal
    container_name: journal_service
    env_file: .env
    volumes:
      - ./src/journal_service:/app/journal_service
      - ./src/shared:/app/shared
      - ./src/agent_service:/app/agent_service # Temporary, for task queue import
    command: uvicorn journal_service.web.app:app --host 0.0.0.0 --port 8001 --reload
    depends_on:
      - postgres
      - redis
    ports:
      - "8001:8001" # Expose for direct access during dev

  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: ui
    env_file: .env
    volumes:
      - ./src:/app/src
      - ./shared:/app/shared
    depends_on:
      - agent_service
      - journal_service
    ports:
      - "8501:8501" # Streamlit default port

  # --- Workers ---
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.agent # Uses the same image as agent service
    container_name: celery_worker
    command: celery -A agent_service.celery_app.celery_app worker -l info -Q indexing,maintenance
    env_file: .env
    volumes:
      - ./src/agent_service:/app/agent_service
      - ./src/shared:/app/shared
      - ./ingestion:/app/ingestion
      - local_gcs_bucket:/app/local_gcs_bucket
    depends_on:
      - redis
      - postgres
      - qdrant

  celery_flower:
    image: mher/flower:2.0
    container_name: celery_flower
    environment:
      - CELERY_BROKER_URL=${REDIS_URL}
    env_file: .env
    ports:
      - "5555:5555"
    depends_on:
      - redis

  # --- Databases & Infrastructure ---
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    # The official qdrant image is distroless and has no shell,
    # so we can't use a command-based healthcheck.
    # We rely on service_started condition.

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  qdrant_data:
  local_gcs_bucket:
 