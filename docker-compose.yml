services:
  # --- Frontend ---
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: web
    env_file: .env
    environment:
      - NEXT_PUBLIC_GATEWAY_URL=http://gateway:4000/graphql
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_APP_MODE=${NEXT_PUBLIC_APP_MODE:-demo}
    networks:
      - mindmirror-network
    depends_on:
      gateway:
        condition: service_healthy
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Backend Services ---
  agent_service:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: agent_service
    env_file: .env
    volumes:
      - ./src/agent_service:/app/agent_service
      - ./src/shared:/app/shared
      - ./ingestion:/app/ingestion
      - local_gcs_bucket:/app/local_gcs_bucket
    command: uvicorn agent_service.web.app:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - mindmirror-network
    depends_on:
      - postgres
      - qdrant
      - redis
    ports:
      - "8000:8000" # Expose for direct access during dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 1s
      timeout: 20s
      retries: 10
      start_period: 5s

  journal_service:
    build:
      context: .
      dockerfile: Dockerfile.journal
    container_name: journal_service
    env_file: .env
    volumes:
      - ./src/journal_service:/app/journal_service
      - ./src/shared:/app/shared
      - ./src/agent_service:/app/agent_service # Temporary, for task queue import
    command: uvicorn journal_service.web.app:app --host 0.0.0.0 --port 8001 --reload
    networks:
      - mindmirror-network
    depends_on:
      - postgres
      - redis
    ports:
      - "8001:8001" # Expose for direct access during dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 1s
      timeout: 20s
      retries: 10
      start_period: 5s
      

  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: ui
    env_file: .env
    volumes:
      - ./src:/app/src
      - ./shared:/app/shared
    networks:
      - mindmirror-network
    depends_on:
      - agent_service
      - journal_service
    ports:
      - "8501:8501" # Streamlit default port

  # --- Workers ---
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.agent # Uses the same image as agent service
    container_name: celery_worker
    command: celery -A agent_service.celery_app.celery_app worker -l info -Q indexing,maintenance
    env_file: .env
    volumes:
      - ./src/agent_service:/app/agent_service
      - ./src/shared:/app/shared
      - ./ingestion:/app/ingestion
      - local_gcs_bucket:/app/local_gcs_bucket
    networks:
      - mindmirror-network
    depends_on:
      - redis
      - postgres
      - qdrant

  celery_flower:
    image: mher/flower:2.0
    container_name: celery_flower
    environment:
      - CELERY_BROKER_URL=${REDIS_URL}
    env_file: .env
    networks:
      - mindmirror-network
    ports:
      - "5555:5555"
    depends_on:
      - redis

  # --- Databases & Infrastructure ---
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mindmirror-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - mindmirror-network
    volumes:
      - qdrant_data:/qdrant/storage
    # The official qdrant image is distroless and has no shell,
    # so we can't use a command-based healthcheck.
    # We rely on service_started condition.

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mindmirror-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  mesh-compose:
    build:
      context: ./mesh
      dockerfile: Dockerfile.mesh-compose
    command: ["bash", "-c", "npx mesh-compose -o build/supergraph.graphql"]
    volumes:
      - ./mesh/build:/app/build
    networks:
      - mindmirror-network
    depends_on:
      journal_service:
        condition: service_healthy
      agent_service:
        condition: service_healthy

  gateway:
    build:
      context: ./mesh
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
    env_file:
      - .env
    volumes:
      - ./mesh/gateway.config.ts:/app/gateway.config.ts
      - ./mesh/build:/app/build
    networks:
      - mindmirror-network
    depends_on:
      mesh-compose:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/healthcheck"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 5s

volumes:
  postgres_data:
  qdrant_data:
  local_gcs_bucket:

networks:
  mindmirror-network:
    driver: bridge