services:
  # --- Frontend ---
  # --- DEPRECATED ---
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: web
    env_file: ${ENV_FILE:-.env}
    environment:
      - NEXT_PUBLIC_GATEWAY_URL=http://gateway:4000/graphql
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_APP_MODE=${NEXT_PUBLIC_APP_MODE:-demo}
      - NEXT_PUBLIC_INSIGHT_TIMEOUT=${NEXT_PUBLIC_INSIGHT_TIMEOUT:-240000}
    networks:
      - mindmirror-network
    depends_on:
      gateway:
        condition: service_healthy
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Backend Services ---
  agent_service:
    build:
      context: .
      dockerfile: src/agent_service/Dockerfile
    container_name: agent_service
    env_file: ${ENV_FILE:-.env}
    environment:
      # Prompt Storage Configuration
      - PROMPT_STORAGE_TYPE=${PROMPT_STORAGE_TYPE:-gcs}
      - YAML_STORAGE_PATH=${YAML_STORAGE_PATH:-/app/prompts}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME:-}
      - GCS_CREDENTIALS_FILE=${GCS_CREDENTIALS_FILE:-}
      - GCS_EMULATOR_HOST=${GCS_EMULATOR_HOST:-}
      # GCS Configuration - Only set emulator host if USE_GCS_EMULATOR is true
      - STORAGE_EMULATOR_HOST=${STORAGE_EMULATOR_HOST:-}
      - TRADITION_DISCOVERY_MODE=${TRADITION_DISCOVERY_MODE:-}
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-mindmirror-69}
    volumes:
      - ./src/agent_service:/app/agent_service
      - ./local_gcs_bucket:/app/local_gcs_bucket:ro  # Read-only local files
      - gcs_emulator_data:/app/gcs_data              # GCS emulator storage
      # Mount local Google Cloud credentials for real GCS access
      - ~/.config/gcloud:/root/.config/gcloud:ro
    command: uvicorn agent_service.app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - mindmirror-network
    depends_on:
      - postgres
      - qdrant
      - redis
      - gcs-emulator
    ports:
      - "8000:8000" # Expose for direct access during dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 1s
      timeout: 20s
      retries: 10
      start_period: 5s

  journal_service:
    build:
      context: .
      dockerfile: src/journal_service/Dockerfile
    container_name: journal_service
    env_file: ${ENV_FILE:-.env}
    environment:
      # GCS Configuration - Only set emulator host if USE_GCS_EMULATOR is true
      - STORAGE_EMULATOR_HOST=${STORAGE_EMULATOR_HOST:-}
      - TRADITION_DISCOVERY_MODE=${TRADITION_DISCOVERY_MODE:-}
      # Note: DATABASE_URL and ENVIRONMENT now come from env_file to support ENV_FILE switching
    volumes:
      - ./src/journal_service:/app/journal_service
      - ./local_gcs_bucket:/app/local_gcs_bucket:ro  # Read-only local files
      - gcs_emulator_data:/app/gcs_data              # GCS emulator storage
      # Mount local Google Cloud credentials for real GCS access
      - ~/.config/gcloud:/root/.config/gcloud:ro
    command: uvicorn journal_service.journal_service.main:app --host 0.0.0.0 --port 8001 --reload
    networks:
      - mindmirror-network
    depends_on:
      - postgres
      - redis
      - gcs-emulator
    ports:
      - "8001:8001" # Expose for direct access during dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 1s
      timeout: 20s
      retries: 10
      start_period: 5s

  habits_service:
    build:
      context: .
      dockerfile: habits_service/Dockerfile
      args:
        BUILD_WITH_DEV: ${HABITS_BUILD_WITH_DEV:-true}
    container_name: habits_service
    env_file: ${ENV_FILE:-.env}
    # environment:
      # Note: DATABASE_URL and ENVIRONMENT come from env_file (ENV_FILE switching)
    volumes:
      - ./habits_service:/app/habits_service
    command: uvicorn habits_service.habits_service.app.main:app --host 0.0.0.0 --port 8003 --reload
    networks:
      - mindmirror-network
    depends_on:
      - postgres
      - redis
    ports:
      - "8003:8003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 1s
      timeout: 20s
      retries: 10
      start_period: 5s

  cli:
    build:
      context: .
      dockerfile: cli/Dockerfile
    container_name: mindmirror_cli
    env_file: ${ENV_FILE:-.env}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_SCHEMA=${DATABASE_SCHEMA:-habits}
    networks:
      - mindmirror-network
    depends_on:
      - postgres
      - habits_service
    volumes:
      - ./data:/workspace/data:ro
    command: ["mindmirror", "--help"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 1s
      timeout: 20s
      retries: 10
      start_period: 5s

  # --- Workers ---
  celery-worker-web:
    build:
      context: .
      dockerfile: celery-worker/Dockerfile
    container_name: celery-worker-web
    env_file: ${ENV_FILE:-.env}
    environment:
      # Prompt Storage Configuration
      - PROMPT_STORAGE_TYPE=${PROMPT_STORAGE_TYPE:-gcs}
      - YAML_STORAGE_PATH=${YAML_STORAGE_PATH:-/app/prompts}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME:-}
      - GCS_CREDENTIALS_FILE=${GCS_CREDENTIALS_FILE:-}
      - GCS_EMULATOR_HOST=${GCS_EMULATOR_HOST:-}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - JOURNAL_SERVICE_URL=${JOURNAL_SERVICE_URL:-http://journal_service:8001}
      - REINDEX_SECRET_KEY=${REINDEX_SECRET_KEY:-dev-secret-key}
      # GCS Configuration - Only set emulator host if USE_GCS_EMULATOR is true
      - STORAGE_EMULATOR_HOST=${STORAGE_EMULATOR_HOST:-}
      - TRADITION_DISCOVERY_MODE=${TRADITION_DISCOVERY_MODE:-}
      - RUN_MODE=web
    volumes:
      - ./celery-worker:/app
      - ./ingestion:/app/ingestion
      - ./local_gcs_bucket:/app/local_gcs_bucket:ro  # Read-only local files
      - gcs_emulator_data:/app/gcs_data              # GCS emulator storage
      # Mount local Google Cloud credentials for real GCS access
      - ~/.config/gcloud:/root/.config/gcloud:ro
    command: ["./start.sh"]
    networks:
      - mindmirror-network
    depends_on:
      - redis
      - postgres
      - qdrant
      - journal_service
      - gcs-emulator
    ports:
      - "8002:8000" # Expose for direct access during dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    build:
      context: .
      dockerfile: celery-worker/Dockerfile
    container_name: celery-worker
    env_file: ${ENV_FILE:-.env}
    environment:
      # Prompt Storage Configuration
      - PROMPT_STORAGE_TYPE=${PROMPT_STORAGE_TYPE:-gcs}
      - YAML_STORAGE_PATH=${YAML_STORAGE_PATH:-/app/prompts}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME:-}
      - GCS_CREDENTIALS_FILE=${GCS_CREDENTIALS_FILE:-}
      - GCS_EMULATOR_HOST=${GCS_EMULATOR_HOST:-}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - JOURNAL_SERVICE_URL=${JOURNAL_SERVICE_URL:-http://journal_service:8001}
      - REINDEX_SECRET_KEY=${REINDEX_SECRET_KEY:-dev-secret-key}
      # GCS Configuration - Only set emulator host if USE_GCS_EMULATOR is true
      - STORAGE_EMULATOR_HOST=${STORAGE_EMULATOR_HOST:-}
      - TRADITION_DISCOVERY_MODE=${TRADITION_DISCOVERY_MODE:-}
      - RUN_MODE=worker
    volumes:
      - ./celery-worker:/app
      - ./ingestion:/app/ingestion
      - ./local_gcs_bucket:/app/local_gcs_bucket:ro  # Read-only local files
      - gcs_emulator_data:/app/gcs_data              # GCS emulator storage
      # Mount local Google Cloud credentials for real GCS access
      - ~/.config/gcloud:/root/.config/gcloud:ro
    command: ["./start.sh"]
    networks:
      - mindmirror-network
    depends_on:
      - redis
      - postgres
      - qdrant
      - journal_service
      - gcs-emulator

  celery_flower:
    image: mher/flower:2.0
    container_name: celery_flower
    environment:
      - CELERY_BROKER_URL=${REDIS_URL}
    env_file: ${ENV_FILE:-.env}
    networks:
      - mindmirror-network
    ports:
      - "5555:5555"
    depends_on:
      - redis

  # --- GCS Emulator (Development Only) ---
  gcs-emulator:
    image: fsouza/fake-gcs-server:latest
    container_name: gcs-emulator
    ports:
      - "4443:4443"
    volumes:
      - ./local_gcs_bucket:/data:ro  # Preload local files into emulator
    command: ["-scheme", "http", "-port", "4443"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4443/storage/v1/b"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - mindmirror-network

  # --- Databases & Infrastructure ---
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    env_file: ${ENV_FILE:-.env}
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mindmirror-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - mindmirror-network
    volumes:
      - qdrant_data:/qdrant/storage

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - mindmirror-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  mesh-compose:
    build:
      context: ./mesh
      dockerfile: Dockerfile.mesh-compose
    command: ["bash", "-c", "npx mesh-compose -c mesh.config.dynamic.ts -o build/supergraph.graphql"]
    environment:
      - JOURNAL_SERVICE_URL=http://journal_service:8001
      - AGENT_SERVICE_URL=http://agent_service:8000
      - HABITS_SERVICE_URL=http://habits_service:8003
      - MEALS_SERVICE_URL=http://meals_service:8004
      - MOVEMENTS_SERVICE_URL=http://movements_service:8005
      - PRACTICES_SERVICE_URL=http://practices_service:8000
      - USERS_SERVICE_URL=http://users_service:8000
      - VOUCHERS_WEB_BASE_URL=${VOUCHERS_WEB_BASE_URL:-http://web:3001}
    volumes:
      - ./mesh/build:/app/build
    networks:
      - mindmirror-network
    depends_on:
      journal_service:
        condition: service_healthy
      agent_service:
        condition: service_healthy
      habits_service:
        condition: service_healthy
      meals_service:
        condition: service_healthy
      movements_service:
        condition: service_healthy
      practices_service:
        condition: service_healthy
      users_service:
        condition: service_healthy

  gateway:
    build:
      context: ./mesh
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
    env_file:
      - ${ENV_FILE:-.env}
    volumes:
      - ./mesh/gateway.config.ts:/app/gateway.config.ts
      - ./mesh/build:/app/build
    networks:
      - mindmirror-network
    depends_on:
      mesh-compose:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/healthcheck"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 5s

  meals_service:
    build:
      context: ./meals_service
      dockerfile: Dockerfile
    container_name: meals_service
    env_file: ${ENV_FILE:-.env}
    # environment:
      # Preferred single URL (service supports DATABASE_URL first)
      # - OFF_SEARCHALICIOUS_ENABLED=${OFF_SEARCHALICIOUS_ENABLED:-true}
    #   - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    #   # Generic DB_* used by current implementation
    #   - DB_HOST=postgres
    #   - DB_PORT=5432
    #   - DB_USER=${POSTGRES_USER}
    #   - DB_PASSWORD=${POSTGRES_PASSWORD}
    #   - DB_NAME=${POSTGRES_DB}
    networks:
      - mindmirror-network
    depends_on:
      - postgres
    ports:
      - "8004:8004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 5s

  movements_postgres:
    image: postgres:15-alpine
    container_name: movements_postgres
    env_file: ${ENV_FILE:-.env}
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=${MOVEMENTS_DB_USER:-movements_user}
      - POSTGRES_PASSWORD=${MOVEMENTS_DB_PASSWORD:-movements_password}
      - POSTGRES_DB=${MOVEMENTS_DB_NAME:-swae_movements}
    volumes:
      - movements_postgres_data:/var/lib/postgresql/data
    networks:
      - mindmirror-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  practices_postgres:
    image: postgres:15-alpine
    container_name: practices_postgres
    env_file: ${ENV_FILE:-.env}
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_USER=${PRACTICES_DB_USER:-practices_user}
      - POSTGRES_PASSWORD=${PRACTICES_DB_PASSWORD:-practices_password}
      - POSTGRES_DB=${PRACTICES_DB_NAME:-swae_practices}
    volumes:
      - practices_postgres_data:/var/lib/postgresql/data
    networks:
      - mindmirror-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  movements_service:
    build:
      context: ./movements_service
      dockerfile: Dockerfile
      args:
        BUILD_WITH_DEV: ${MOVEMENTS_BUILD_WITH_DEV:-true}
    container_name: movements_service
    env_file: ${ENV_FILE:-.env}
    environment:
      - DATABASE_URL=postgresql+asyncpg://${MOVEMENTS_DB_USER:-movements_user}:${MOVEMENTS_DB_PASSWORD:-movements_password}@movements_postgres:5432/${MOVEMENTS_DB_NAME:-swae_movements}
      - PORT=8005
      - EXERCISEDB_BASE_URL=${EXERCISEDB_BASE_URL:-https://v2.exercisedb.io}
      - EXERCISEDB_API_KEY=${EXERCISEDB_API_KEY:-}
    networks:
      - mindmirror-network
    depends_on:
      movements_postgres:
        condition: service_healthy
    ports:
      - "8005:8005"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 5s

  practices_service:
    build:
      context: .
      dockerfile: practices_service/Dockerfile
    container_name: practices_service
    env_file: ${ENV_FILE:-.env}
    environment:
      # - DATABASE_URL=postgresql+asyncpg://${PRACTICES_DB_USER:-practices_user}:${PRACTICES_DB_PASSWORD:-practices_password}@practices_postgres:5432/${PRACTICES_DB_NAME:-swae_practices}
      - USERS_SERVICE_URL=http://users_service:8000/graphql
      - HABITS_SERVICE_BASE_URL=http://habits_service:8003
    networks:
      - mindmirror-network
    depends_on:
      practices_postgres:
        condition: service_healthy
    ports:
      - "8006:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 5s

  users_postgres:
    image: postgres:15-alpine
    container_name: users_postgres
    env_file: ${ENV_FILE:-.env}
    ports:
      - "5437:5432"
    environment:
      - POSTGRES_USER=${USERS_DB_USER:-users_user}
      - POSTGRES_PASSWORD=${USERS_DB_PASSWORD:-users_password}
      - POSTGRES_DB=${USERS_DB_NAME:-swae_users}
    volumes:
      - users_postgres_data:/var/lib/postgresql/data
    networks:
      - mindmirror-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  users_service:
    build:
      context: ./users_service
      dockerfile: Dockerfile
    container_name: users_service
    env_file: ${ENV_FILE:-.env}
    environment:
      - DB_HOST=users_postgres
      - DB_PORT=5432
      - DB_USER=${USERS_DB_USER:-users_user}
      - DB_PASSWORD=${USERS_DB_PASSWORD:-users_password}
      - DB_NAME=${USERS_DB_NAME:-swae_users}
    networks:
      - mindmirror-network
    depends_on:
      users_postgres:
        condition: service_healthy
    ports:
      - "8007:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 5s

volumes:
  postgres_data:
  qdrant_data:
  gcs_emulator_data:
  prompts_data:
    driver: local
  movements_postgres_data:
  practices_postgres_data:
  users_postgres_data:

networks:
  mindmirror-network:
    driver: bridge
