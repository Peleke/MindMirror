name: Tofu Apply - Staging

on:
  push:
    branches:
      - staging
    paths:
      - 'infra/**'

env:
  TOFU_VERSION: "1.6.0"
  GCP_PROJECT_ID: "mindmirror-69"
  GCP_REGION: "us-east4"
  ENVIRONMENT: "staging"

jobs:
  apply:
    runs-on: ubuntu-latest
    # Add manual approval for staging during testing phase
    environment:
      name: staging
      url: https://console.cloud.google.com/run?project=mindmirror-69
    permissions:
      contents: read
      id-token: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_STAGING_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-pool/providers/github-oidc'
          service_account: 'github-actions-staging@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Tofu Init
        working-directory: infra
        run: |
          tofu init -backend-config=${{ env.ENVIRONMENT }}.backend.hcl

      - name: Tofu Plan
        id: plan
        working-directory: infra
        run: |
          tofu plan -var-file=${{ env.ENVIRONMENT }}.auto.tfvars -out=plan.tfplan -no-color 2>&1 | tee plan-output.txt

          # Count changes
          CHANGES=$(grep -E "Plan:|No changes" plan-output.txt || echo "Unknown")
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT

      - name: Tofu Apply
        id: apply
        working-directory: infra
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Applying to Staging"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          tofu apply -auto-approve plan.tfplan 2>&1 | tee apply-output.txt

          APPLY_EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$APPLY_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $APPLY_EXIT_CODE -eq 0 ]; then
            echo "✅ Apply successful"
          else
            echo "❌ Apply failed"
          fi

          exit $APPLY_EXIT_CODE

      - name: Verify Deployment
        if: steps.apply.outputs.exit_code == '0'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 Verifying Staging Deployment"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # List Cloud Run services
          gcloud run services list \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --format="table(SERVICE,REGION,URL,LAST_DEPLOYED)"

      - name: Deployment Summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Staging Deployment Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Project: ${{ env.GCP_PROJECT_ID }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "Plan: ${{ steps.plan.outputs.changes }}"
          echo "Apply: ${{ steps.apply.outputs.exit_code == '0' && '✅ Success' || '❌ Failed' }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ❌ Staging Deployment Failed

            **Commit**: ${context.sha.substring(0, 7)}
            **Branch**: ${context.ref}
            **Workflow**: [View logs](${context.payload.repository.html_url}/actions/runs/${context.runId})

            Check the workflow logs for details.`;

            // Create issue on failure
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ Staging deployment failed',
              body: message,
              labels: ['deployment', 'staging', 'failure']
            });
