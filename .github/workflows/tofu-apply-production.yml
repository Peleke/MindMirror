name: Tofu Apply - Production

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'

env:
  TOFU_VERSION: "1.6.0"
  GCP_PROJECT_ID: "mindmirror-prod"
  GCP_REGION: "us-east4"
  ENVIRONMENT: "production"

jobs:
  apply:
    runs-on: ubuntu-latest
    # Use GitHub Environments for manual approval
    environment:
      name: production
      url: https://console.cloud.google.com/run?project=mindmirror-prod
    permissions:
      contents: read
      id-token: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PRODUCTION_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-pool/providers/github-oidc'
          service_account: 'github-actions-production@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Tofu Init
        working-directory: infra
        run: |
          tofu init -backend-config=${{ env.ENVIRONMENT }}.backend.hcl

      - name: Tofu Plan
        id: plan
        working-directory: infra
        run: |
          tofu plan -var-file=${{ env.ENVIRONMENT }}.auto.tfvars -out=plan.tfplan -no-color 2>&1 | tee plan-output.txt

          # Count changes
          CHANGES=$(grep -E "Plan:|No changes" plan-output.txt || echo "Unknown")
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT

          # Save plan summary
          echo "plan_summary<<EOF" >> $GITHUB_OUTPUT
          cat plan-output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Pre-Apply Checklist
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  PRODUCTION DEPLOYMENT CHECKLIST"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Changes: ${{ steps.plan.outputs.changes }}"
          echo ""
          echo "Pre-flight checks:"
          echo "✅ Plan reviewed in PR"
          echo "✅ Manual approval granted"
          echo "✅ Staging deployment successful"
          echo "✅ Testing completed in staging"
          echo ""
          echo "Proceeding with production apply..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Tofu Apply
        id: apply
        working-directory: infra
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Applying to Production"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          tofu apply -auto-approve plan.tfplan 2>&1 | tee apply-output.txt

          APPLY_EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$APPLY_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $APPLY_EXIT_CODE -eq 0 ]; then
            echo "✅ Production apply successful"
          else
            echo "❌ Production apply failed"
          fi

          exit $APPLY_EXIT_CODE

      - name: Verify Deployment
        if: steps.apply.outputs.exit_code == '0'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 Verifying Production Deployment"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # List Cloud Run services
          gcloud run services list \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --format="table(SERVICE,REGION,URL,LAST_DEPLOYED)"

          echo ""
          echo "🔍 Checking service health..."

          # Check agent service health
          AGENT_URL=$(gcloud run services describe agent-service \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')

          if [ ! -z "$AGENT_URL" ]; then
            echo "Testing agent-service health endpoint..."
            curl -f -s "$AGENT_URL/health" || echo "⚠️ Health check failed"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Production Deployment Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Project: ${{ env.GCP_PROJECT_ID }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Deployer: ${{ github.actor }}"
          echo ""
          echo "Plan: ${{ steps.plan.outputs.changes }}"
          echo "Apply: ${{ steps.apply.outputs.exit_code == '0' && '✅ Success' || '❌ Failed' }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Create Deployment Issue on Success
        if: steps.apply.outputs.exit_code == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ✅ Production Deployment Successful

            **Environment**: Production
            **Project**: ${{ env.GCP_PROJECT_ID }}
            **Commit**: ${context.sha.substring(0, 7)}
            **Deployed by**: @${context.actor}
            **Timestamp**: ${new Date().toISOString()}

            ### Changes
            \`\`\`
            ${{ steps.plan.outputs.changes }}
            \`\`\`

            ### Verification
            - [Cloud Run Console](https://console.cloud.google.com/run?project=${{ env.GCP_PROJECT_ID }})
            - [Workflow Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})

            **Next Steps**:
            - [ ] Verify production services are healthy
            - [ ] Monitor logs for errors
            - [ ] Check user-facing functionality
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `✅ Production deployment: ${context.sha.substring(0, 7)}`,
              body: message,
              labels: ['deployment', 'production', 'success']
            });

      - name: Create Failure Issue
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## 🚨 Production Deployment Failed

            **Environment**: Production
            **Project**: ${{ env.GCP_PROJECT_ID }}
            **Commit**: ${context.sha.substring(0, 7)}
            **Failed at**: ${new Date().toISOString()}

            ### Error Details
            Check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.

            ### Rollback Steps
            1. Identify last known good state
            2. Revert infrastructure changes if needed
            3. Re-deploy previous working version

            **Priority**: 🔴 CRITICAL
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 CRITICAL: Production deployment failed',
              body: message,
              labels: ['deployment', 'production', 'failure', 'critical']
            });
