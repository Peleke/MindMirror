#!/bin/bash
set -e

# MindMirror Production: RLS Policy Application
# This script applies Row-Level Security policies to Supabase tables

echo "ðŸ”’ MindMirror Production - RLS Policy Setup"
echo "==========================================="

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
step() { echo -e "${BLUE}[STEP]${NC} $1"; }

# Get DATABASE_URL
if [ -z "$DATABASE_URL" ]; then
  warn "DATABASE_URL not set in environment"

  # Try to get from GCP Secret Manager
  if command -v gcloud &>/dev/null; then
    PROJECT_ID=$(gcloud config get-value project 2>/dev/null)
    if [ -n "$PROJECT_ID" ]; then
      info "Fetching DATABASE_URL from Secret Manager..."
      DATABASE_URL=$(gcloud secrets versions access latest --secret="DATABASE_URL" --project="$PROJECT_ID" 2>/dev/null)
    fi
  fi

  # Still not found - prompt user
  if [ -z "$DATABASE_URL" ]; then
    read -p "Enter DATABASE_URL (postgres://...): " DATABASE_URL
  fi
fi

[ -z "$DATABASE_URL" ] && error "DATABASE_URL is required"

info "Using database: ${DATABASE_URL%%@*}@***"

# Check for psql
command -v psql >/dev/null 2>&1 || error "psql not found. Install PostgreSQL client tools"

# RLS policies SQL
RLS_SQL=$(cat <<'EOF'
-- MindMirror Production: Row-Level Security Policies
-- Generated by 04-apply-rls-policies.sh

BEGIN;

-- ====================================
-- 1. VOUCHERS TABLE
-- ====================================
-- Users should only access their own vouchers

-- Enable RLS on vouchers table
ALTER TABLE IF EXISTS vouchers ENABLE ROW LEVEL SECURITY;

-- Drop existing policies (idempotent)
DROP POLICY IF EXISTS "Users can view own vouchers" ON vouchers;
DROP POLICY IF EXISTS "Users can insert own vouchers" ON vouchers;
DROP POLICY IF EXISTS "Users can update own vouchers" ON vouchers;
DROP POLICY IF EXISTS "Service role has full access to vouchers" ON vouchers;

-- Policy: View own vouchers
CREATE POLICY "Users can view own vouchers"
  ON vouchers
  FOR SELECT
  USING (auth.uid()::text = user_id);

-- Policy: Insert own vouchers
CREATE POLICY "Users can insert own vouchers"
  ON vouchers
  FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

-- Policy: Update own vouchers
CREATE POLICY "Users can update own vouchers"
  ON vouchers
  FOR UPDATE
  USING (auth.uid()::text = user_id)
  WITH CHECK (auth.uid()::text = user_id);

-- Policy: Service role bypass (for admin operations)
CREATE POLICY "Service role has full access to vouchers"
  ON vouchers
  USING (auth.jwt()->>'role' = 'service_role');

-- ====================================
-- 2. JOURNAL ENTRIES TABLE
-- ====================================
-- Users should only access their own journal entries

-- Enable RLS on journal_entries table
ALTER TABLE IF EXISTS journal_entries ENABLE ROW LEVEL SECURITY;

-- Drop existing policies
DROP POLICY IF EXISTS "Users can view own journal entries" ON journal_entries;
DROP POLICY IF EXISTS "Users can insert own journal entries" ON journal_entries;
DROP POLICY IF EXISTS "Users can update own journal entries" ON journal_entries;
DROP POLICY IF EXISTS "Users can delete own journal entries" ON journal_entries;
DROP POLICY IF EXISTS "Service role has full access to journal entries" ON journal_entries;

-- Policies for journal entries
CREATE POLICY "Users can view own journal entries"
  ON journal_entries
  FOR SELECT
  USING (auth.uid()::text = user_id OR auth.uid()::text = supabase_user_id);

CREATE POLICY "Users can insert own journal entries"
  ON journal_entries
  FOR INSERT
  WITH CHECK (auth.uid()::text = user_id OR auth.uid()::text = supabase_user_id);

CREATE POLICY "Users can update own journal entries"
  ON journal_entries
  FOR UPDATE
  USING (auth.uid()::text = user_id OR auth.uid()::text = supabase_user_id)
  WITH CHECK (auth.uid()::text = user_id OR auth.uid()::text = supabase_user_id);

CREATE POLICY "Users can delete own journal entries"
  ON journal_entries
  FOR DELETE
  USING (auth.uid()::text = user_id OR auth.uid()::text = supabase_user_id);

CREATE POLICY "Service role has full access to journal entries"
  ON journal_entries
  USING (auth.jwt()->>'role' = 'service_role');

-- ====================================
-- 3. HABITS TABLE
-- ====================================
-- Users should only access their own habits

ALTER TABLE IF EXISTS habits ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own habits" ON habits;
DROP POLICY IF EXISTS "Users can insert own habits" ON habits;
DROP POLICY IF EXISTS "Users can update own habits" ON habits;
DROP POLICY IF EXISTS "Users can delete own habits" ON habits;
DROP POLICY IF EXISTS "Service role has full access to habits" ON habits;

CREATE POLICY "Users can view own habits"
  ON habits
  FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can insert own habits"
  ON habits
  FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update own habits"
  ON habits
  FOR UPDATE
  USING (auth.uid()::text = user_id)
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can delete own habits"
  ON habits
  FOR DELETE
  USING (auth.uid()::text = user_id);

CREATE POLICY "Service role has full access to habits"
  ON habits
  USING (auth.jwt()->>'role' = 'service_role');

-- ====================================
-- 4. PRACTICES (WORKOUTS) TABLE
-- ====================================
-- Users should only access their own practice instances

ALTER TABLE IF EXISTS practice_instances ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own practices" ON practice_instances;
DROP POLICY IF EXISTS "Users can insert own practices" ON practice_instances;
DROP POLICY IF EXISTS "Users can update own practices" ON practice_instances;
DROP POLICY IF EXISTS "Service role has full access to practices" ON practice_instances;

CREATE POLICY "Users can view own practices"
  ON practice_instances
  FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can insert own practices"
  ON practice_instances
  FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update own practices"
  ON practice_instances
  FOR UPDATE
  USING (auth.uid()::text = user_id)
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Service role has full access to practices"
  ON practice_instances
  USING (auth.jwt()->>'role' = 'service_role');

-- ====================================
-- 5. MEALS TABLE
-- ====================================
-- Users should only access their own meal logs

ALTER TABLE IF EXISTS meals ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own meals" ON meals;
DROP POLICY IF EXISTS "Users can insert own meals" ON meals;
DROP POLICY IF EXISTS "Users can update own meals" ON meals;
DROP POLICY IF EXISTS "Users can delete own meals" ON meals;
DROP POLICY IF EXISTS "Service role has full access to meals" ON meals;

CREATE POLICY "Users can view own meals"
  ON meals
  FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can insert own meals"
  ON meals
  FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update own meals"
  ON meals
  FOR UPDATE
  USING (auth.uid()::text = user_id)
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can delete own meals"
  ON meals
  FOR DELETE
  USING (auth.uid()::text = user_id);

CREATE POLICY "Service role has full access to meals"
  ON meals
  USING (auth.jwt()->>'role' = 'service_role');

-- ====================================
-- 6. MOVEMENTS (EXERCISES) TABLE
-- ====================================
-- Users should only access their own exercise logs

ALTER TABLE IF EXISTS movements ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own movements" ON movements;
DROP POLICY IF EXISTS "Users can insert own movements" ON movements;
DROP POLICY IF EXISTS "Users can update own movements" ON movements;
DROP POLICY IF EXISTS "Users can delete own movements" ON movements;
DROP POLICY IF EXISTS "Service role has full access to movements" ON movements;

CREATE POLICY "Users can view own movements"
  ON movements
  FOR SELECT
  USING (auth.uid()::text = user_id);

CREATE POLICY "Users can insert own movements"
  ON movements
  FOR INSERT
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update own movements"
  ON movements
  FOR UPDATE
  USING (auth.uid()::text = user_id)
  WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can delete own movements"
  ON movements
  FOR DELETE
  USING (auth.uid()::text = user_id);

CREATE POLICY "Service role has full access to movements"
  ON movements
  USING (auth.jwt()->>'role' = 'service_role');

COMMIT;

-- Verify RLS is enabled
SELECT
  schemaname,
  tablename,
  rowsecurity
FROM pg_tables
WHERE schemaname = 'public'
  AND rowsecurity = true
ORDER BY tablename;
EOF
)

echo ""
warn "This will apply RLS policies to the PRODUCTION database!"
echo "  Database: ${DATABASE_URL%%@*}@***"
echo ""
echo "Tables that will be protected:"
echo "  - vouchers"
echo "  - journal_entries"
echo "  - habits"
echo "  - practice_instances (workouts)"
echo "  - meals"
echo "  - movements (exercises)"
echo ""
read -p "Continue? (y/n): " confirm
[[ "$confirm" != "y" ]] && error "Aborted by user"

# Apply policies
step "Applying RLS policies..."

echo "$RLS_SQL" | psql "$DATABASE_URL" || error "Failed to apply RLS policies"

info "âœ… RLS policies applied successfully"

# Verify
step "Verifying RLS is enabled..."

VERIFICATION=$(echo "
SELECT tablename, rowsecurity
FROM pg_tables
WHERE schemaname = 'public' AND rowsecurity = true;
" | psql "$DATABASE_URL" -t)

echo "$VERIFICATION"

echo ""
echo "==========================================="
echo -e "${GREEN}âœ… RLS Policy Setup Complete!${NC}"
echo "==========================================="
echo ""
info "All tables are now protected with Row-Level Security"
info "Users can only access their own data"
info "Service role can bypass RLS for admin operations"
echo ""
warn "IMPORTANT: Test RLS policies before production launch!"
echo "  1. Create test user in Supabase"
echo "  2. Verify they can only see their own data"
echo "  3. Verify service role can access all data"
echo ""
info "Next step: Deploy infrastructure (make production-deploy)"
