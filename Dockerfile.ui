# First stage: Build stage with Poetry
FROM python:3.11-slim AS builder

# Allow statements and log messages to immediately appear in the logs
ENV PYTHONUNBUFFERED=True

# Set work directory
WORKDIR /tmp

# Install Poetry
RUN pip install poetry poetry-plugin-export

# Copy only the necessary files for dependency installation
COPY ./pyproject.toml ./poetry.lock* /tmp/

# Allow setting a build argument for PROD/DEV builds
ARG PROD=0

# Install dependencies based on the PROD flag
RUN if [ "$PROD" = "1" ]; then \
      poetry export -f requirements.txt --output requirements.txt --without-hashes; \
    else \
      poetry export --with dev -f requirements.txt --output requirements.txt --without-hashes; \
    fi

# Second stage: Production/Runtime stage
FROM python:3.11-slim

# Set the working directory to /app
ENV APP_HOME=/app
WORKDIR $APP_HOME
ENV PYTHONPATH=/app

# Create a non-root user and group for security
RUN groupadd -r appuser && useradd --no-log-init -r -g appuser appuser

# Create proper home directory with write permissions
RUN mkdir -p /home/appuser/.streamlit && \
    chown -R appuser:appuser /home/appuser

# Install curl (useful for healthchecks, etc.) and other essential packages
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy the requirements.txt from the builder stage
COPY --from=builder /tmp/requirements.txt .

# Install runtime dependencies from requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application source code
COPY . .

# Change ownership of the app directory to the non-root user
RUN chown -R appuser:appuser $APP_HOME

# Switch to the non-root user
USER appuser

# Set up Streamlit configuration
RUN mkdir -p /home/appuser/.streamlit && \
    echo '[general]' > /home/appuser/.streamlit/config.toml && \
    echo 'dataFrameSerialization = "legacy"' >> /home/appuser/.streamlit/config.toml && \
    echo '[server]' >> /home/appuser/.streamlit/config.toml && \
    echo 'headless = true' >> /home/appuser/.streamlit/config.toml && \
    echo 'enableCORS = false' >> /home/appuser/.streamlit/config.toml && \
    echo 'enableXsrfProtection = false' >> /home/appuser/.streamlit/config.toml && \
    echo '[browser]' >> /home/appuser/.streamlit/config.toml && \
    echo 'gatherUsageStats = false' >> /home/appuser/.streamlit/config.toml

# Expose the port the app runs on
EXPOSE 8501

# Configure Streamlit environment variables
ENV STREAMLIT_SERVER_HEADLESS=true \
    STREAMLIT_SERVER_ENABLE_CORS=false \
    STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false \
    STREAMLIT_BROWSER_GATHER_USAGE_STATS=false

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health || exit 1

# Command to run the Streamlit app
CMD ["python", "-m", "streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"] 