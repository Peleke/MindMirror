schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
    
    
    
    
    
    
    
  {
    query: Query
    mutation: Mutation
    
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  
  
enum join__Graph {
  AGENT @join__graph(name: "Agent", url: "http://agent_service:8000/graphql") 
  HABITS @join__graph(name: "Habits", url: "http://habits_service:8003/graphql") 
  JOURNAL @join__graph(name: "Journal", url: "http://journal_service:8001/graphql") 
}

"""
Date with time (isoformat)
"""
scalar DateTime @join__type(graph: AGENT)  @join__type(graph: JOURNAL) 

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @join__type(graph: AGENT) 

"""
Represents binary data as Base64-encoded strings, using the standard alphabet.
"""
scalar Base64 @join__type(graph: AGENT) 

scalar TransportOptions @join__type(graph: AGENT)  @join__type(graph: HABITS)  @join__type(graph: JOURNAL) 

"""
Date (isoformat)
"""
scalar Date @join__type(graph: HABITS) 

scalar UUID @join__type(graph: JOURNAL) 

type Query @join__type(graph: AGENT)  @join__type(graph: HABITS)  @join__type(graph: JOURNAL)  {
  ask(
    query: String!
    tradition: String! = "canon-default"
    includeJournalContext: Boolean! = true
  ): String! @join__field(graph: AGENT) 
  listTraditions: [String!]! @join__field(graph: AGENT) 
  getMealSuggestion(mealType: String!, tradition: String!) : String! @join__field(graph: AGENT) 
  summarizeJournals: JournalSummary! @join__field(graph: AGENT) 
  semanticSearch(
    query: String!
    tradition: String! = "canon-default"
    includePersonal: Boolean! = true
    includeKnowledge: Boolean! = true
    entryTypes: [String!] = null
    limit: Int! = 10
  ): [String!]! @join__field(graph: AGENT) 
  listTools(
    backend: String = null
    tags: [String!] = null
    ownerDomain: String = null
    version: String = null
  ): [ToolMetadata!]! @join__field(graph: AGENT) 
  getToolMetadata(toolName: String!, version: String = null) : ToolMetadata @join__field(graph: AGENT) 
  getToolRegistryHealth: ToolRegistryHealth! @join__field(graph: AGENT) 
  listToolNames: [String!]! @join__field(graph: AGENT) 
  health: String! @join__field(graph: HABITS) 
  service: String! @join__field(graph: HABITS) 
  todaysTasks(onDate: Date!) : [Task!]! @join__field(graph: HABITS) 
  programTemplates: [ProgramTemplateType!]! @join__field(graph: HABITS) 
  programTemplateBySlug(slug: String!) : ProgramTemplateType @join__field(graph: HABITS) 
  programAssignments(status: String = null) : [ProgramAssignmentType!]! @join__field(graph: HABITS) 
  lessonTemplateById(id: String!) : LessonTemplateType @join__field(graph: HABITS) 
  programTemplateSteps(programId: String!) : [ProgramStepType!]! @join__field(graph: HABITS) 
  programStepLessons(programStepId: String!) : [StepLessonType!]! @join__field(graph: HABITS) 
  programStepDailyPlan(programStepId: String!) : [StepDayPlanType!]! @join__field(graph: HABITS) 
  lessonSegmentById(id: String!) : LessonSegmentType @join__field(graph: HABITS) 
  recentLessonCompletions(limit: Int! = 50) : [LessonCompletionType!]! @join__field(graph: HABITS) 
  lessonsForHabit(habitTemplateId: String!, onDate: Date!) : [LessonForHabitType!]! @join__field(graph: HABITS) 
  habitStats(habitTemplateId: String!, lookbackDays: Int! = 14) : HabitStatsType! @join__field(graph: HABITS) 
  habitStreakDebug(habitTemplateId: String!, lookbackDays: Int! = 14) : [HabitDayDebugType!]! @join__field(graph: HABITS) 
  journalEntries(entryType: String = null, limit: Int! = 10, offset: Int! = 0) : [JournalEntryInterface!]! @join__field(graph: JOURNAL) 
  journalEntry(entryId: UUID!) : JournalEntryInterface @join__field(graph: JOURNAL) 
  journalEntrySystem(entryId: UUID!) : JournalEntryInterface @join__field(graph: JOURNAL) 
  gratitudeEntries(limit: Int! = 10, offset: Int! = 0) : [GratitudeJournalEntry!]! @join__field(graph: JOURNAL) 
  reflectionEntries(limit: Int! = 10, offset: Int! = 0) : [ReflectionJournalEntry!]! @join__field(graph: JOURNAL) 
  freeformEntries(limit: Int! = 10, offset: Int! = 0) : [FreeformJournalEntry!]! @join__field(graph: JOURNAL) 
  journalEntryExistsToday(entryType: String!) : Boolean! @join__field(graph: JOURNAL) 
  journalEntriesForHabit(habitTemplateId: UUID!, limit: Int! = 20, offset: Int! = 0) : [JournalEntryInterface!]! @join__field(graph: JOURNAL) 
  journalEntriesCount: Int! @join__field(graph: JOURNAL) 
  completedLessons(limit: Int! = 50, offset: Int! = 0) : [String!]! @join__field(graph: JOURNAL) 
}

type JournalSummary @join__type(graph: AGENT)  {
  summary: String!
  generatedAt: DateTime!
}

type ToolMetadata @join__type(graph: AGENT)  {
  name: String!
  description: String!
  ownerDomain: String!
  version: String!
  backend: String!
  effectBoundary: String!
  tags: [String!]!
  subtools: [String!]!
  inputSchema: JSON!
  outputSchema: JSON!
}

type ToolRegistryHealth @join__type(graph: AGENT)  {
  status: String!
  totalTools: Int!
  uniqueTools: Int!
  backends: JSON!
  error: String
}

type Mutation @join__type(graph: AGENT)  @join__type(graph: HABITS)  @join__type(graph: JOURNAL)  {
  generateReview(tradition: String!) : PerformanceReview! @join__field(graph: AGENT) 
  executeTool(toolName: String!, arguments: JSON!, version: String = null) : ToolExecutionResult! @join__field(graph: AGENT) 
  executeSubtool(
    toolName: String!
    subtoolName: String!
    arguments: JSON!
    version: String = null
  ): ToolExecutionResult! @join__field(graph: AGENT) 
  uploadDocument(fileName: String!, content: Base64!, tradition: String! = "canon-default") : Boolean! @join__field(graph: AGENT) 
  createHabitTemplate(input: HabitTemplateInput!) : HabitTemplatePayload! @join__field(graph: HABITS) 
  createLessonTemplate(input: LessonTemplateInput!) : LessonTemplatePayload! @join__field(graph: HABITS) 
  createProgramTemplate(input: ProgramTemplateInput!) : ProgramTemplatePayload! @join__field(graph: HABITS) 
  addProgramStep(programId: String!, input: ProgramStepInput!) : ProgramStepPayload! @join__field(graph: HABITS) 
  addStepLesson(stepId: String!, dayIndex: Int!, lessonTemplateId: String!) : Boolean! @join__field(graph: HABITS) 
  assignProgramToUser(programId: String!, startDate: Date!) : AssignmentPayload! @join__field(graph: HABITS) 
  unenrollProgram(programId: String!) : Boolean! @join__field(graph: HABITS) 
  recordHabitResponse(habitTemplateId: String!, onDate: Date!, response: String!) : Boolean! @join__field(graph: HABITS) 
  recordLessonOpened(lessonTemplateId: String!, onDate: Date!) : Boolean! @join__field(graph: HABITS) 
  markLessonCompleted(lessonTemplateId: String!, onDate: Date!) : Boolean! @join__field(graph: HABITS) 
  upsertStepDailyPlan(programStepId: String!, items: [StepDayPlanInput!]!) : Boolean! @join__field(graph: HABITS) 
  upsertLessonSegments(segments: [LessonSegmentInput!]!) : Boolean! @join__field(graph: HABITS) 
  autoEnroll(campaign: String!) : AutoEnrollResult! @join__field(graph: HABITS) 
  createGratitudeJournalEntry(input: GratitudeEntryInput!) : GratitudeJournalEntry! @join__field(graph: JOURNAL) 
  createReflectionJournalEntry(input: ReflectionEntryInput!) : ReflectionJournalEntry! @join__field(graph: JOURNAL) 
  createFreeformJournalEntry(input: FreeformEntryInput!) : FreeformJournalEntry! @join__field(graph: JOURNAL) 
  deleteJournalEntry(entryId: UUID!) : Boolean! @join__field(graph: JOURNAL) 
}

type PerformanceReview @join__type(graph: AGENT)  {
  keySuccess: String!
  improvementArea: String!
  journalPrompt: String!
}

type ToolExecutionResult @join__type(graph: AGENT)  {
  success: Boolean!
  result: [JSON!]!
  error: String
  executionTimeMs: Int
}

type HabitTask @join__type(graph: HABITS)  {
  taskId: String!
  type: TaskType!
  habitTemplateId: String!
  title: String!
  description: String
  subtitle: String
  status: TaskStatus!
}

type LessonTask @join__type(graph: HABITS)  {
  taskId: String!
  type: TaskType!
  lessonTemplateId: String!
  title: String!
  summary: String
  status: TaskStatus!
}

type JournalTask @join__type(graph: HABITS)  {
  taskId: String!
  type: TaskType!
  title: String!
  description: String
  status: TaskStatus!
}

type ProgramTemplateType @join__type(graph: HABITS)  {
  id: String!
  slug: String!
  title: String!
  description: String
  subtitle: String
  heroImageUrl: String
}

type ProgramAssignmentType @join__type(graph: HABITS)  {
  id: String!
  userId: String!
  programTemplateId: String!
  status: String!
  startDate: Date!
}

type LessonTemplateType @join__type(graph: HABITS)  {
  id: String!
  slug: String!
  title: String!
  summary: String
  markdownContent: String!
  subtitle: String
  heroImageUrl: String
}

type ProgramStepType @join__type(graph: HABITS)  {
  id: String!
  sequenceIndex: Int!
  durationDays: Int!
  habit: HabitBasicType!
  started: Boolean!
  daysCompleted: Int!
  totalDays: Int!
}

type HabitBasicType @join__type(graph: HABITS)  {
  id: String!
  title: String!
  shortDescription: String
  description: String
}

type StepLessonType @join__type(graph: HABITS)  {
  dayIndex: Int!
  lessonTemplateId: String!
  title: String!
  summary: String
  estReadMinutes: Int
  subtitle: String
  heroImageUrl: String
}

type StepDayPlanType @join__type(graph: HABITS)  {
  dayIndex: Int!
  habitVariantText: String
  journalPromptText: String
  lessonSegmentId: String
}

type LessonSegmentType @join__type(graph: HABITS)  {
  id: String!
  lessonTemplateId: String!
  title: String!
  subtitle: String
  markdownContent: String!
  summary: String
}

type LessonCompletionType @join__type(graph: HABITS)  {
  lessonTemplateId: String!
  title: String!
  summary: String
  completedAt: Date!
}

type LessonForHabitType @join__type(graph: HABITS)  {
  lessonTemplateId: String!
  title: String!
  summary: String
  completed: Boolean!
}

type HabitStatsType @join__type(graph: HABITS)  {
  presentedCount: Int!
  completedCount: Int!
  adherenceRate: Float!
  currentStreak: Int!
}

type HabitDayDebugType @join__type(graph: HABITS)  {
  date: Date!
  presented: Boolean!
  completed: Boolean!
  eventResponse: String
}

type HabitTemplatePayload @join__type(graph: HABITS)  {
  id: String!
  slug: String!
  title: String!
}

type LessonTemplatePayload @join__type(graph: HABITS)  {
  id: String!
  slug: String!
  title: String!
}

type ProgramTemplatePayload @join__type(graph: HABITS)  {
  id: String!
  slug: String!
  title: String!
}

type ProgramStepPayload @join__type(graph: HABITS)  {
  id: String!
  programTemplateId: String!
  sequenceIndex: Int!
  habitTemplateId: String!
  durationDays: Int!
}

type AssignmentPayload @join__type(graph: HABITS)  {
  id: String!
  userId: String!
  programTemplateId: String!
  status: String!
}

type AutoEnrollResult @join__type(graph: HABITS)  {
  ok: Boolean!
  enrolled: Boolean!
  reason: String
}

type GratitudeJournalEntry implements JournalEntryInterface @join__type(graph: JOURNAL)  @join__implements(graph: JOURNAL, interface: "JournalEntryInterface")  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
  habitTemplateId: String
  payload: GratitudePayloadType!
}

type GratitudePayloadType @join__type(graph: JOURNAL)  {
  gratefulFor: [String!]!
  excitedAbout: [String!]!
  focus: String
  affirmation: String
  mood: String
}

type ReflectionJournalEntry implements JournalEntryInterface @join__type(graph: JOURNAL)  @join__implements(graph: JOURNAL, interface: "JournalEntryInterface")  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
  habitTemplateId: String
  payload: ReflectionPayloadType!
}

type ReflectionPayloadType @join__type(graph: JOURNAL)  {
  wins: [String!]!
  improvements: [String!]!
  mood: String
}

type FreeformJournalEntry implements JournalEntryInterface @join__type(graph: JOURNAL)  @join__implements(graph: JOURNAL, interface: "JournalEntryInterface")  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
  habitTemplateId: String
  payload: String!
}

interface JournalEntryInterface @join__type(graph: JOURNAL)  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
  habitTemplateId: String
}

union Task @join__type(graph: HABITS)  @join__unionMember(graph: HABITS, member: "HabitTask")  @join__unionMember(graph: HABITS, member: "LessonTask")  @join__unionMember(graph: HABITS, member: "JournalTask")  = HabitTask | LessonTask | JournalTask

enum TaskType @join__type(graph: HABITS)  {
  habit @join__enumValue(graph: HABITS) 
  lesson @join__enumValue(graph: HABITS) 
  journal @join__enumValue(graph: HABITS) 
}

enum TaskStatus @join__type(graph: HABITS)  {
  pending @join__enumValue(graph: HABITS) 
  completed @join__enumValue(graph: HABITS) 
  dismissed @join__enumValue(graph: HABITS) 
}

input HabitTemplateInput @join__type(graph: HABITS)  {
  slug: String!
  title: String!
  shortDescription: String = null
  description: String = null
  level: Int = null
  defaultDurationDays: Int! = 7
}

input LessonTemplateInput @join__type(graph: HABITS)  {
  slug: String!
  title: String!
  markdownContent: String!
  summary: String = null
}

input ProgramTemplateInput @join__type(graph: HABITS)  {
  slug: String!
  title: String!
  description: String = null
}

input ProgramStepInput @join__type(graph: HABITS)  {
  sequenceIndex: Int!
  habitTemplateId: String!
  durationDays: Int!
}

input StepDayPlanInput @join__type(graph: HABITS)  {
  dayIndex: Int!
  habitVariantText: String = null
  journalPromptText: String = null
  lessonSegmentId: String = null
}

input LessonSegmentInput @join__type(graph: HABITS)  {
  lessonTemplateId: String!
  dayIndexWithinStep: Int = null
  title: String!
  subtitle: String = null
  markdownContent: String!
  summary: String = null
}

input GratitudeEntryInput @join__type(graph: JOURNAL)  {
  gratefulFor: [String!]!
  excitedAbout: [String!]!
  focus: String = null
  affirmation: String = null
  mood: String = null
  habitTemplateId: String = null
}

input ReflectionEntryInput @join__type(graph: JOURNAL)  {
  wins: [String!]!
  improvements: [String!]!
  mood: String = null
  habitTemplateId: String = null
}

input FreeformEntryInput @join__type(graph: JOURNAL)  {
  content: String!
  habitTemplateId: String = null
}