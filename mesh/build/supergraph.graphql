schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
    
    
    
    
    
    
    
  {
    query: Query
    mutation: Mutation
    
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  
  
enum join__Graph {
  AGENT @join__graph(
    name: "Agent"
    url: "https://agent-service-3858903851.us-east4.run.app/graphql"
  )
  JOURNAL @join__graph(
    name: "Journal"
    url: "https://journal-service-3858903851.us-east4.run.app/graphql"
  )
}

"""
Date with time (isoformat)
"""
scalar DateTime @join__type(graph: AGENT)  @join__type(graph: JOURNAL) 

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @join__type(graph: AGENT) 

"""
Represents binary data as Base64-encoded strings, using the standard alphabet.
"""
scalar Base64 @join__type(graph: AGENT) 

scalar TransportOptions @join__type(graph: AGENT)  @join__type(graph: JOURNAL) 

scalar UUID @join__type(graph: JOURNAL) 

type Query @join__type(graph: AGENT)  @join__type(graph: JOURNAL)  {
  ask(
    query: String!
    tradition: String! = "canon-default"
    includeJournalContext: Boolean! = true
  ): String! @join__field(graph: AGENT) 
  listTraditions: [String!]! @join__field(graph: AGENT) 
  getMealSuggestion(mealType: String!, tradition: String!) : String! @join__field(graph: AGENT) 
  summarizeJournals: JournalSummary! @join__field(graph: AGENT) 
  semanticSearch(
    query: String!
    tradition: String! = "canon-default"
    includePersonal: Boolean! = true
    includeKnowledge: Boolean! = true
    entryTypes: [String!] = null
    limit: Int! = 10
  ): [String!]! @join__field(graph: AGENT) 
  listTools(
    backend: String = null
    tags: [String!] = null
    ownerDomain: String = null
    version: String = null
  ): [ToolMetadata!]! @join__field(graph: AGENT) 
  getToolMetadata(toolName: String!, version: String = null) : ToolMetadata @join__field(graph: AGENT) 
  getToolRegistryHealth: ToolRegistryHealth! @join__field(graph: AGENT) 
  listToolNames: [String!]! @join__field(graph: AGENT) 
  journalEntries(entryType: String = null, limit: Int! = 10, offset: Int! = 0) : [JournalEntryInterface!]! @join__field(graph: JOURNAL) 
  journalEntry(entryId: UUID!) : JournalEntryInterface @join__field(graph: JOURNAL) 
  journalEntrySystem(entryId: UUID!) : JournalEntryInterface @join__field(graph: JOURNAL) 
  gratitudeEntries(limit: Int! = 10, offset: Int! = 0) : [GratitudeJournalEntry!]! @join__field(graph: JOURNAL) 
  reflectionEntries(limit: Int! = 10, offset: Int! = 0) : [ReflectionJournalEntry!]! @join__field(graph: JOURNAL) 
  freeformEntries(limit: Int! = 10, offset: Int! = 0) : [FreeformJournalEntry!]! @join__field(graph: JOURNAL) 
  journalEntryExistsToday(entryType: String!) : Boolean! @join__field(graph: JOURNAL) 
  journalEntriesCount: Int! @join__field(graph: JOURNAL) 
}

type JournalSummary @join__type(graph: AGENT)  {
  summary: String!
  generatedAt: DateTime!
}

type ToolMetadata @join__type(graph: AGENT)  {
  name: String!
  description: String!
  ownerDomain: String!
  version: String!
  backend: String!
  effectBoundary: String!
  tags: [String!]!
  subtools: [String!]!
  inputSchema: JSON!
  outputSchema: JSON!
}

type ToolRegistryHealth @join__type(graph: AGENT)  {
  status: String!
  totalTools: Int!
  uniqueTools: Int!
  backends: JSON!
  error: String
}

type Mutation @join__type(graph: AGENT)  @join__type(graph: JOURNAL)  {
  generateReview(tradition: String!) : PerformanceReview! @join__field(graph: AGENT) 
  executeTool(toolName: String!, arguments: JSON!, version: String = null) : ToolExecutionResult! @join__field(graph: AGENT) 
  executeSubtool(
    toolName: String!
    subtoolName: String!
    arguments: JSON!
    version: String = null
  ): ToolExecutionResult! @join__field(graph: AGENT) 
  uploadDocument(fileName: String!, content: Base64!, tradition: String! = "canon-default") : Boolean! @join__field(graph: AGENT) 
  createGratitudeJournalEntry(input: GratitudeEntryInput!) : GratitudeJournalEntry! @join__field(graph: JOURNAL) 
  createReflectionJournalEntry(input: ReflectionEntryInput!) : ReflectionJournalEntry! @join__field(graph: JOURNAL) 
  createFreeformJournalEntry(input: FreeformEntryInput!) : FreeformJournalEntry! @join__field(graph: JOURNAL) 
  deleteJournalEntry(entryId: UUID!) : Boolean! @join__field(graph: JOURNAL) 
}

type PerformanceReview @join__type(graph: AGENT)  {
  keySuccess: String!
  improvementArea: String!
  journalPrompt: String!
}

type ToolExecutionResult @join__type(graph: AGENT)  {
  success: Boolean!
  result: [JSON!]!
  error: String
  executionTimeMs: Int
}

type GratitudeJournalEntry implements JournalEntryInterface @join__type(graph: JOURNAL)  @join__implements(graph: JOURNAL, interface: "JournalEntryInterface")  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
  payload: GratitudePayloadType!
}

type GratitudePayloadType @join__type(graph: JOURNAL)  {
  gratefulFor: [String!]!
  excitedAbout: [String!]!
  focus: String
  affirmation: String
  mood: String
}

type ReflectionJournalEntry implements JournalEntryInterface @join__type(graph: JOURNAL)  @join__implements(graph: JOURNAL, interface: "JournalEntryInterface")  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
  payload: ReflectionPayloadType!
}

type ReflectionPayloadType @join__type(graph: JOURNAL)  {
  wins: [String!]!
  improvements: [String!]!
  mood: String
}

type FreeformJournalEntry implements JournalEntryInterface @join__type(graph: JOURNAL)  @join__implements(graph: JOURNAL, interface: "JournalEntryInterface")  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
  payload: String!
}

interface JournalEntryInterface @join__type(graph: JOURNAL)  {
  id: String!
  userId: String!
  entryType: String!
  createdAt: DateTime!
  modifiedAt: DateTime
}

input GratitudeEntryInput @join__type(graph: JOURNAL)  {
  gratefulFor: [String!]!
  excitedAbout: [String!]!
  focus: String = null
  affirmation: String = null
  mood: String = null
}

input ReflectionEntryInput @join__type(graph: JOURNAL)  {
  wins: [String!]!
  improvements: [String!]!
  mood: String = null
}

input FreeformEntryInput @join__type(graph: JOURNAL)  {
  content: String!
}