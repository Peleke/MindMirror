# run mesh-compose within Docker to allow direct reference to service names in `mesh.config.ts`
FROM node:20-slim

WORKDIR /app

RUN apt-get update && apt-get install -y curl wget

# Install Mesh CLI tools
COPY package.json yarn.lock ./
RUN yarn install

# Bring in your mesh config
COPY . /app

# Build arguments for service URLs (with defaults for Docker)
ARG JOURNAL_SERVICE_URL=http://journal_service:8001
ARG AGENT_SERVICE_URL=http://agent_service:8000

# Create dynamic mesh config with build args
RUN echo 'import { defineConfig, loadGraphQLHTTPSubgraph } from "@graphql-mesh/compose-cli"' > mesh.config.dynamic.ts && \
    echo '' >> mesh.config.dynamic.ts && \
    echo 'export const composeConfig = defineConfig({' >> mesh.config.dynamic.ts && \
    echo '  subgraphs: [' >> mesh.config.dynamic.ts && \
    echo '    {' >> mesh.config.dynamic.ts && \
    echo '      sourceHandler: loadGraphQLHTTPSubgraph("Journal", {' >> mesh.config.dynamic.ts && \
    echo '        endpoint: "'${JOURNAL_SERVICE_URL}'/graphql",' >> mesh.config.dynamic.ts && \
    echo '      }),' >> mesh.config.dynamic.ts && \
    echo '    },' >> mesh.config.dynamic.ts && \
    echo '    {' >> mesh.config.dynamic.ts && \
    echo '      sourceHandler: loadGraphQLHTTPSubgraph("Agent", {' >> mesh.config.dynamic.ts && \
    echo '        endpoint: "'${AGENT_SERVICE_URL}'/graphql",' >> mesh.config.dynamic.ts && \
    echo '      })' >> mesh.config.dynamic.ts && \
    echo '    },' >> mesh.config.dynamic.ts && \
    echo '  ]' >> mesh.config.dynamic.ts && \
    echo '})' >> mesh.config.dynamic.ts

# Generate supergraph during build (not at runtime)
RUN npx mesh-compose -c mesh.config.dynamic.ts -o supergraph.graphql

# Keep the CMD for backward compatibility
CMD ["npx", "mesh-compose", "-c", "mesh.config.dynamic.ts", "-o", "supergraph.graphql"]

